% Encoding: UTF-8

@Article{Huang2016,
  author    = {Jiewen Huang and Daniel Abadi},
  title     = {{LEOPARD:} Lightweight Edge-Oriented Partitioning and Replication for Dynamic Graphs},
  journal   = {{PVLDB}},
  year      = {2016},
  volume    = {9},
  number    = {7},
  pages     = {540--551},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/pvldb/HuangA16.bib},
  doi       = {10.14778/2904483.2904486},
  url       = {http://www.vldb.org/pvldb/vol9/p540-huang.pdf},
}

@Article{Besta2019,
  author      = {Maciej Besta and Emanuel Peter and Robert Gerstenberger and Marc Fischer and Micha≈Ç Podstawski and Claude Barthels and Gustavo Alonso and Torsten Hoefler},
  title       = {Demystifying Graph Databases: Analysis and Taxonomy of Data Organization, System Designs, and Graph Queries},
  abstract    = {Graph processing has become an important part of multiple areas of computer science, such as machine learning, computational sciences, medical applications, social network analysis, and many others. Numerous graphs such as web or social networks may contain up to trillions of edges. Often, these graphs are also dynamic (their structure changes over time) and have domain-specific rich data associated with vertices and edges. Graph database systems such as Neo4j enable storing, processing, and analyzing such large, evolving, and rich datasets. Due to the sheer size of such datasets, combined with the irregular nature of graph processing, these systems face unique design challenges. To facilitate the understanding of this emerging domain, we present the first survey and taxonomy of graph database systems. We focus on identifying and analyzing fundamental categories of these systems (e.g., triple stores, tuple stores, native graph database systems, or object-oriented systems), the associated graph models (e.g., RDF or Labeled Property Graph), data organization techniques (e.g., storing graph data in indexing structures or dividing data into records), and different aspects of data distribution and query execution (e.g., support for sharding and ACID). 45 graph database systems are presented and compared, including Neo4j, OrientDB, or Virtuoso. We outline graph database queries and relationships with associated domains (NoSQL stores, graph streaming, and dynamic graph algorithms). Finally, we describe research and engineering challenges to outline the future of graph databases.},
  date        = {2019-10-20},
  eprint      = {http://arxiv.org/abs/1910.09017v1},
  eprintclass = {cs.DB},
  eprinttype  = {arXiv},
  file        = {:http\://arxiv.org/pdf/1910.09017v1:PDF},
  keywords    = {cs.DB, cs.DC},
}

@Article{Eifrem2016,
  author  = {Eifrem, Emil},
  title   = {Graph databases: The key to foolproof fraud detection?},
  journal = {Computer Fraud \& Security},
  year    = {2016},
  volume  = {2016},
  pages   = {5-8},
  month   = {03},
  doi     = {10.1016/S1361-3723(16)30024-0},
}

@Book{Robinson2015,
  title     = {Graph databases: new opportunities for connected data},
  publisher = {" O'Reilly Media, Inc."},
  year      = {2015},
  author    = {Robinson, Ian and Webber, Jim and Eifrem, Emil},
}

@Article{Sahu2017,
  author    = {Sahu, Siddhartha and Mhedhbi, Amine and Salihoglu, Semih and Lin, Jimmy and {\"O}zsu, M Tamer},
  title     = {The ubiquity of large graphs and surprising challenges of graph processing},
  journal   = {Proceedings of the VLDB Endowment},
  year      = {2017},
  volume    = {11},
  number    = {4},
  pages     = {420--431},
  publisher = {VLDB Endowment},
}

@InProceedings{Ezhilchelvan2018,
  author    = {Paul D. Ezhilchelvan and Isi Mitrani and Jim Webber},
  title     = {On the Degradation of Distributed Graph Databases with Eventual Consistency},
  booktitle = {Computer Performance Engineering - 15th European Workshop, {EPEW} 2018, Paris, France, October 29-30, 2018, Proceedings},
  year      = {2018},
  editor    = {Rena Bakhshi and Paolo Ballarini and Beno{\^{\i}}t Barbot and Hind Castel{-}Taleb and Anne Remke},
  volume    = {11178},
  series    = {Lecture Notes in Computer Science},
  pages     = {1--13},
  publisher = {Springer},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/epew/EzhilchelvanMW18.bib},
  doi       = {10.1007/978-3-030-02227-3\_1},
  url       = {https://doi.org/10.1007/978-3-030-02227-3\_1},
}

@InProceedings{Berenson1995,
  author    = {Hal Berenson and Philip A. Bernstein and Jim Gray and Jim Melton and Elizabeth J. O'Neil and Patrick E. O'Neil},
  title     = {A Critique of {ANSI} {SQL} Isolation Levels},
  booktitle = {Proceedings of the 1995 {ACM} {SIGMOD} International Conference on Management of Data, San Jose, California, USA, May 22-25, 1995},
  year      = {1995},
  editor    = {Michael J. Carey and Donovan A. Schneider},
  pages     = {1--10},
  publisher = {{ACM} Press},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/sigmod/BerensonBGMOO95.bib},
  doi       = {10.1145/223784.223785},
}

@Article{Bailis2013,
  author        = {Peter Bailis and Ali Ghodsi},
  title         = {Eventual consistency today: limitations, extensions, and beyond},
  journal       = {Commun. {ACM}},
  year          = {2013},
  volume        = {56},
  number        = {5},
  pages         = {55--63},
  __markedentry = {[jackwaudby:]},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/journals/cacm/BailisG13.bib},
  doi           = {10.1145/2447976.2447992},
}

@Misc{janusgraph,
  title        = {{JanusGraph Documentation}},
  howpublished = {\url{http://janusgraph.org/}},
  note         = {Accessed: 2020-02-16},
}

@Misc{TitanDB,
  title        = {{TitanDB Documentation}},
  howpublished = {\url{https://titan.thinkaurelius.com}},
  note         = {Accessed: [2020-02-17]},
}

@Misc{Cassandra,
  title        = {{Apache Cassandra Documentation}},
  howpublished = {\url{http://cassandra.apache.org}},
  note         = {Accessed: [2020-02-17]},
}

@Article{Webber2019,
  author        = {Jim Webber and Paul Ezhilchelvan and Isi Mitrani},
  title         = {Modeling Corruption in Eventually-Consistent Graph Databases},
  __markedentry = {[jackwaudby:6]},
  abstract      = {We present a model and analysis of an eventually consistent graph database where loosely cooperating servers accept concurrent updates to a partitioned, distributed graph. The model is high-fidelity and preserves design choices from contemporary graph database management systems. To explore the problem space, we use two common graph topologies as data models for realistic experimentation. The analysis reveals, even assuming completely fault-free hardware and bug-free software, that if it is possible for updates to interfere with one-another, corruption will occur and spread significantly through the graph within the production database lifetime. Using our model, database designers and operators can compute the rate of corruption for their systems and determine whether they are sufficiently dependable for their intended use.},
  date          = {2019-04-09},
  eprint        = {http://arxiv.org/abs/1904.04702v1},
  eprintclass   = {cs.DB},
  eprinttype    = {arXiv},
  file          = {:http\://arxiv.org/pdf/1904.04702v1:PDF},
  keywords      = {cs.DB, cs.DC, cs.PF},
}

@Comment{jabref-meta: databaseType:bibtex;}
